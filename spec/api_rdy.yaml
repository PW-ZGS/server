openapi: 3.0.3
info:
  title: Taxi App API Specification
  description: This specification defines the API interfaces for a Taxi application, allowing users to create accounts, drivers to report ride requests, passengers to request rides, manage offices, create routes, and match users to routes.
  version: 1.0.0
paths:
  /users:
    post:
      summary: Create User Account
      description: Creates a user account, storing the name, contact, and generating a userId. Returns the userId.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                contact:
                  type: string
      responses:
        '200':
          description: Account creation confirmation and userId
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
  /users/validation:
    get:
      summary: Validate User
      description: Verifies the user based on the userId and returns the contact and userId.
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Validation confirmation and user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  contact:
                    type: string
        '404':
          description: Not found
  /offices:
    get:
      summary: Get List of Offices
      description: Retrieves a list of offices with ID, name, and location (geo).
      responses:
        '200':
          description: List of offices
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    officeId:
                      type: string
                      description: Unique identifier of the office
                    name:
                      type: string
                      description: Name of the office
                    location:
                      $ref: '#/components/schemas/Location'
  /passengers:
    get:
      summary: Get Waiting Place Information
      description: Retrieves information about the passenger's waiting place, including location and estimated waiting time.
      parameters:
        - name: contact
          in: query
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Waiting place information
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/Location'

  /driver_routes/from:
    post:
      summary: Create DriverRoute (From)
      description: Creates a new route with a starting point (office) and specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteInput'
      responses:
        '200':
          description: DriverRoute created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  routeId:
                    type: string
  /driver_routes/to:
    post:
      summary: Create DriverRoute (To)
      description: Creates a new route with an ending point (office) and specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteInput'
      responses:
        '200':
          description: DriverRoute created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  routeId:
                    type: string

  /driver_routes/by-users/{userId}:
    get:
      summary: Get Driver's Routes
      description: Retrieves a list of routes reported by the driver, with optional filtering by userId.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of driver's routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverRoute'

  /driver_routes/{routeId}:
    get:
      summary: Get DriverRoute
      description: Retrieves a route
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: DriverRoute
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverRoute'

    delete:
      summary: Delete DriverRoute
      description: Deletes the specified route.
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: DriverRoute deleted successfully
    post:
      summary: Modify Passenger Count
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - inc
                    - dec
      responses:
        '200':
          description: Passenger count modified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updatedPassengerCount:
                    type: integer

  /passenger_routes/from:
    post:
      summary: Create PassengerRoute (From)
      description: Creates a new desire with a starting point (office) and specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassengerRouteInput'
      responses:
        '200':
          description: PassengerRoute created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  passengerRouteId:
                    type: string
  /passenger_routes/to:
    post:
      summary: Create PassengerRoute (To)
      description: Creates a new desire with an ending point (office) and specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassengerRouteInput'
      responses:
        '200':
          description: PassengerRoute created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  passengerRouteId:
                    type: string
  /passenger_routes/{passengerRouteId}:
    delete:
      summary: Delete DriverRoute
      description: Deletes the specified route.
      parameters:
        - name: passengerRouteId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: DriverRoute deleted successfully
    get:
      summary: Get PassengerRoute
      description: Retrieves a desire
      parameters:
        - name: passengerRouteId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: DriverRoute
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassengerRoute'

  /passenger_routes/by-users/{userId}:
    get:
      summary: Get Driver's PassengerRoutes
      description: Retrieves a list of desires reported by the driver, with optional filtering by userId.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of driver's desires
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerRoute'

  /matches:
    get:
      summary: Get Matches by DriverRoute ID
      description: Retrieves a list of matches for a given route ID.
      parameters:
        - name: passengerRouteId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of matches for the route
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    passengerRouteId:
                      type: string
                    contact:
                      type: string
                    name:
                      type: string
                    link:
                      type: string

components:
  schemas:
    RouteInput:
      type: object
      properties:
        officeId:
          type: string
        startPoint:
          $ref: '#/components/schemas/Location'
        fromTime:
          type: string
          format: date-time
        availableSeats:
          type: integer
        userId:
          type: string
    PassengerRouteInput:
      type: object
      properties:
        officeId:
          type: string
        startPoint:
          $ref: '#/components/schemas/Location'
        timeRange:
          $ref: '#/components/schemas/DateRange'
        maxDist:
          type: integer
    DriverRoute:
      type: object
      properties:
        routeId:
          type: string
        startPoint:
          $ref: '#/components/schemas/Location'
        endPoint:
          $ref: '#/components/schemas/Location'
    PassengerRoute:
      type: object
      properties:
        passengerRouteId:
          type: string
        startPoint:
          $ref: '#/components/schemas/Location'
        endPoint:
          $ref: '#/components/schemas/Location'
    Location:
      type: object
      description: Geographic location
      properties:
        latitude:
          type: number
          description: Latitude coordinate
        longitude:
          type: number
          description: Longitude coordinate
    DateRange:
      type: object
      properties:
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64

